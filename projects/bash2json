#!/bin/bash
#
# bash2json: The most bash-based JSON parser
# Credits: Tirito6626, 2025
# License: Apache License 2.0
#

(return 0 2>/dev/null) && export sourced=true || export sourced=false
error() {
  exit=${2}
  printf '%s\n' "error: $1" >&2
  ! "${sourced}" && exit 1 || return 1
}
json_trim() {
  local inside_string=0
  json_trim_output=""
  local sub=$2
  local escaped=false
  while IFS='' read -r -n 1 char; do
   [[ "$char" = '\' ]] && escaped=true
    if "$escaped"; then
       json_trim_output+="$char" && continue
    else 
      [[ "$char" == '"' ]] && ((inside_string ^= 1))
      [[ "$inside_string" = 0 && "$char" == " " ]] && continue
       json_trim_output+="$char"
    fi
  done <<< "$1"
  ! "${sub:=false}" && echo "$json_trim_output"
}
json_append() {
  json_trim "$1" true
  local input="$json_trim_output"
  local key="$2"
  local value="$3"
  local sub="$4"
      [[ "$input" == "" ]] && input='{}'
  if [[ "${key:0:1}" != '{' && "${input:0:1}" != '[' && "$key" =~ \. ]]; then 
    IFS=' ' read append_key subkey <<< "${key/./ }"
    json_query "$input" "$append_key" false true
    local keyout="$json_query_output"
    local oldkeyout="$keyout"
    [[ "$keyout" == null ]] && $FUNCNAME "$input" "$append_key" '{}' true && input="$json_append_output" && keyout='{}'
    $FUNCNAME "$keyout" "$subkey" "$value" true
    local newkeyout="$json_append_output"
    json_query_output=''
    [[ "$append_key" =~ \[[0-9]*\] ]] && json_query "$input" "${append_key//\[[0-9]\]}" false true && local keyout="$json_query_output"
    if [[ "${keyout:0:1}" == '[' && "${newkeyout:0:1}" != "[" ]]; then
      newkeyout="${keyout/${oldkeyout}/${newkeyout}}" 
    [[ "${keyout:0:1}" != '[' && "${newkeyout:0:1}" != "[" ]] && newkeyout="${keyout/${oldkeyout}/${newkeyout}}" 
    fi
    echo "$oldkeyout "${key//\[[0-9]\]}""
    keyout="${keyout//\]/\\]}"
    newkeyout="${newkeyout//\]/\\]}"
    key="${key//\[[0-9]\]/}"
    input="${input/\"${key}\":${keyout//\}/\\\}}/\"${key}\":${newkeyout//\}/\\\}}}"
    json_append_output="${input//\\]/]}"
    json_append_output="${json_append_output//\\\}/\}}"
  elif [[ "$key" =~ "[]" ]]; then 
    case "$value" in 
          true|false|[0-9]|null) : ;;
          *) 
            case "${value:0:1}" in 
              '"'|'{'|'[') : ;;
              *) value='"'"$value"'"' ;; 
            esac
    esac
    key="${key//\[\]/}"
    json_query "$input" "$key" false true
    local keyout="$json_query_output"
    $FUNCNAME "$keyout" "$value" "" true
    local newkeyout="$json_append_output"
    keyout="\"${key}\":${keyout//\]/\\]}"
    newkeyout="\"${key}\":${newkeyout//\]/\]}"
    json_append_output="${input/${keyout}/${newkeyout}}"
  else
    if [[ "${input:0:1}" == "{" ]]; then 
      [ -z "$key" ] && error "key missing"
      [ -z "$value" ] && error "value missing"
      case "$value" in 
          true|false|[0-9]|null) : ;;
          *) 
            case "${value:0:1}" in 
              '"'|'{'|'[') : ;;
              *) value='"'"$value"'"' ;; 
            esac
      esac
      if [[ "$append_key" =~ '=' ]]; then 
        IFS='=' read key type <<< "$key"
        [[ "$type" == "string" && "${value:0:1}" != '"' ]] && value="\"$value\""
      fi
      key="${key//\"}"
      key="${key//\[[0-9]\]/}"
      json_query "$input" "$key" false true
      local keyout="$json_query_output"
      if [[ "$keyout" != "null" ]]; then 
        json_append_output="${input/\"${key}\":${keyout}/\"${key}\":${value}}"
      else 
        [[ "$input" = '{}' ]] && json_append_output="{\"${key}\":$value}" || json_append_output="${input/%\}/,\"${key}\":$value}}" 
      fi
    elif [[ "${input:0:1}" == "[" ]]; then
      [ -z "$key" ] && error "key missing"
      [ -z "$value" ] && value="$key" || value='{ "'"$key"'": '"$value"' }'
      case "$value" in 
          true|false|[0-9]|null) : ;;
          *) 
            case "${value:0:1}" in 
              '"'|'{'|'[') : ;;
              *) value="\"$value\"" ;; 
            esac
      esac
      if [[ "$input" == '[]' ]]; then
        json_append_output="[$value]"
      else
        json_append_output="${input/%]/,$value]}"
      fi
    else 
      error "can't append JSON: not a valid key type" 
    fi
 fi
 ! "${sub:=false}" && echo -e "${json_append_output}" 
 return 0
}
json_list() {
local input="${1# }"
local sub="$2"
local depth=0 result='' quoted=0 escaped=false
if [[ "${input:0:1}" = '{' ]]; then
    while IFS='' read -r -d '' -n 1 char; do
      [[ "$quoted" = 0 && "$char" == " " ]] && continue
      [[ "$prevchar" == '\' ]] && escaped=true && continue
       if "$escaped"; then 
          escaped=false
        elif ((quoted != 0)); then 
          [[ "$char" == '"' ]] && ((quoted ^= 1)) 
        else 
        if (( depth == 1 )); then
          case "$char" in
          ':') result+=" " && continue ;;
          ',') result+=$'\n' && continue ;;
          esac
        fi
          case "$char" in 
            '"') ((quoted ^= 1)) ;;
            '{'|'[') ((++depth)); ((depth == 1)) && continue ;;
            '}'|']') ((--depth)); ((depth == 0)) && continue ;;
          esac 
      fi
      result+="$char"
      ((depth == 0)) && break 
  done <<<"$input"
  json_list_output="$result"
elif [[ "${input:0:1}" = '[' ]]; then
    while IFS='' read -r -d '' -n 1 char; do
      [[ "$quoted" = 0 && "$char" == " " ]] && continue
      [[ "$prevchar" == '\' ]] && escaped=true && continue
      if "$escaped"; then 
        escaped=false
      elif ((quoted != 0)); then 
        [[ "$char" == '"' ]] && ((quoted ^= 1)) 
      else 
          case "$char" in 
          '"') ((quoted ^= 1)) ;;
          '\') escaped=true ;;
          ',') result+=$'\n' && continue ;; 
          '[') ((++depth)); ((depth == 1)) && continue ;;
          ']')  ((--depth)); ((depth == 0)) && break ;;
          '{') ((++depth)) ;;
          '}') ((--depth)) ;;
          esac 
      fi
        result+="$char"
        ((depth == 0)) && break
  done <<<"$input"
  json_list_output="$result"
else 
  json_list_output="$input"
fi
! "${sub:=false}" && echo "$json_list_output"
}

json_validate() {
  local newstring='' escaped=false depth=0 dquotes=0 bdepth=0 newstring='' isvalue=false value='' commas=0 firstchar='' quoted=false prevchar='' inside_string=0 unquotedchars='' code=0
  while IFS='' read -r -d '' -n 1 char; do
    if ! "$isvalue" && [ ! -z "$value" ]; then 
      [[ "$value" =~ ^-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$|^-?\.[0-9]+([eE][+-]?[0-9]+)?$ ]] || case "$value" in
        true|false|null) : ;;
        *) [[ "${value:0:1}" == '"' && "${value: -1}" == '"' ]] || { error "invalid key value \`$value\`"; return 1; }  ;;
      esac 
      value=''
    fi
    [[ "$inside_string" = 0 && "$char" == " " || "$char" == $'\n' ]] && continue
    if "$escaped"; then
      escaped=false
    elif ((inside_string != 0)); then 
      if [[ "$char" == '"' ]]; then 
        ((inside_string ^= 1 && ++dquotes)) 
        "$isvalue" && isvalue=false && value+='"'
      fi
      "$isvalue" && value+="$char"
      [[ "$char" = '\' ]] && escaped=true
    else
      case "$char" in 
        ' ') continue ;;
        ',') "$isvalue" && isvalue=false; 
            [[ "$prevchar" == ',' ]] && error "unexpected ',,'" ;;
      esac
      if [ -z "$firstchar" ]; then 
        firstchar="$char"
        prevchar="$char"
      fi
      case "$firstchar" in
          '{'|'[')
            case "$char" in 
              '"') ((inside_string ^= 1 && ++dquotes))
                    "$isvalue" && value+='"'
                   [[ ! "$prevchar" =~ '{'|'['|','|':' ]] && ((++commas)) ;;
              ':') isvalue=true ;;
              '{') ((++depth))
                   isvalue=false
                   [[ ! "$prevchar" =~ '{'|'['|','|'"'|':' ]] && ((++commas)) ;;
              '}') isvalue=false; ((--depth)) ;;
              '[') isvalue=false; ((++bdepth)); [[ ! "$prevchar" =~ '{'|'['|','|'"'|':' ]] && ((++commas)) ;;
              ']') isvalue=false; ((--bdepth)) ;;
              *) "$isvalue" && value+="$char" ;;
              #[[ "$prevchar" =~ '"'|'{'|':'|',' ]] && quoted=false && unquotedchars+="$char" && continue
            esac 
          ;;
          '"') [[ "$char" == '"' ]] && ((depth ^= 1)) ;;
          *)   [[ "$char" =~ ','|'}'|']' ]] && break 
      esac
      prevchar="$char"
    fi
  done <<< "$1"
  if (( dquotes % 2 )); then 
    (((dquotes-(dquotes-1)) == 1 && depth > 0 )) && error 'expected `"` but got `EOF` instead' || error "missing $missingq \`\"\`"
    code=1
  fi
  (( depth > 0 )) && error "missing ${depth} \`}\`" false && code=1
  (( depth < 0 )) && error "missing ${depth//\-} \`{\`" && code=1
  (( commas > 0 )) && error "missing ${commas} \`,\`" && code=1
  (( bdepth > 0 )) && error "missing ${bdepth} \`]\`" && code=1
  (( bdepth < 0 )) && error "missing ${bdepth//-} \`[\`" && code=1
  [ ! -z "${unquotedchars//\\n}" ] && error "unquoted characters: $unquotedchars" && code=1
}

json_query() {
  local query="$2"
  local raw="$3"
  json_query_output=""
  local sub="$4"
  local IFS=' ' 
  for key in $query; do
    IFS='.' 
    local i=0
    local input="$1"
    for subkey in $key; do
      ((++i))
      ((i > 1)) && [ ! -z "$json_query_output" ] && input="$json_query_output"
      if [[ "$subkey" =~ \[[0-9]*\] ]]; then 
        local index="${BASH_REMATCH[0]:1:-1}"
        if [[ "$index" == "" ]]; then 
          error "expected index number"
          return 1
        fi
        if [[ "$subkey" != \[[0-9]*\] ]]; then
          subfunc=true
          $FUNCNAME "$input" "${subkey//\[[0-9]*\]}" false true
          local input="$json_query_output"
          subfunc=false
        fi
        if [[ "${keyout:0:1}" != '[' ]]; then 
          error "cannot get index of non-array"
          return 1
        fi
        IFS=' '$'\t'$'\n'
        local depth=0 result='' quoted=0 escaped=false
        while IFS='' read -r -d '' -n 1 char; do
          [[ "$quoted" = 0 && "$char" == " " ]] && continue
          [[ "$prevchar" == '\' ]] && escaped=true && continue
          if "$escaped"; then 
            escaped=false
          elif ((quoted != 0)); then 
            [[ "$char" == '"' ]] && ((quoted ^= 1)) 
          else 
            case "$char" in 
              '"') ((quoted ^= 1)) ;;
              '\') escaped=true ;;
              ',') result+=$'\n' && continue ;; 
              '[') ((++depth)); ((depth == 1)) && continue ;;
              ']')  ((--depth)); ((depth == 0)) && break ;;
              '{') ((++depth)) ;;
              '}') ((--depth)) ;;
            esac 
          fi
          result+="$char"
          ((depth == 0)) && break
        done <<<"$input"
        mapfile -t arr <<< "$result"
        json_query_output="${arr[$index]}"
      else
        if [[ "$input"  =~ \"$subkey\":(.*) ]]; then
          string="${BASH_REMATCH[1]}"
          local depth=0 newstring='' firstchar='' escaped=false quoted=0
          while IFS='' read -r -d '' -n 1 char; do
            "$escaped" && newstring+="$char" && escaped=false && continue
            if ((quoted == 0)); then
              [[ "$char" == ' ' ]] && continue
              [ -z "$firstchar" ] && firstchar="$char"
              case "$firstchar" in
              '{'|'[')
                case "$char" in 
                  '"') ((quoted ^= 1)) ;;
                  '\') escaped=true ;;
                  '{'|'[') ((++depth)) ;;
                  '}'|']') ((--depth)) ;;
                esac 
                ((depth == 0)) && newstring+="$char" && break 
              ;;
              '"')
                case "$char" in 
                  '\') escaped=true ;;
                  '"') ((quoted ^= 1)) && newstring+='"'  ;;
                esac
                ((quoted == 0)) && break
              ;; 
              *) 
                [[ "$char" == ',' ||  "$char" == '}' ]] && break 
              esac
            else 
              [[ "$char" == '"' ]] && ((quoted ^= 1))
            fi
          newstring+="$char"
          done <<< "$string"
          if [[ "${firstchar}" == '"' ]]; then 
            [[ "${newstring: -1}"  == '}' ]] && newstring="${newstring::-1}"
            "${raw:=false}" && json_query_output="${newstring//\"}" || json_query_output="${newstring}"
          else 
            json_query_output="${newstring}"
          fi
        else 
          json_query_output=null
        fi
      fi
    done
    sub="$4"
    if ! "${sub:=false}"; then
      "${raw:=false}" && printf "%b\n" "$json_query_output"  || printf "%s\n" "$json_query_output" 
    fi
  done
return 0
}

arr_to_json() {
  i=0
  local sub="$2"
  for arrkey in "$1"; do
    declare -n bash2json_input_arr="$arrkey"
    if [[ ! -z "${bash2json_input_arr[@]}" ]] && [[ -z "$bash2json_input_arr" ]]; then 
     [ -z "${bash2json_input_arr[0]}" ] && local typeofvar="associative" || local typeofvar="indexed"
    fi
    case "$typeofvar" in 
    "associative")
      for key in "${!bash2json_input_arr[@]}"; do
        local value="${bash2json_input_arr[$key]}"
        json_append "$data" "$key" "$value" true
        data="$json_append_output"
      done
      data=${data#\],}
      data=${data/,,/,}
    ;;
    "indexed")
      local data='[]'
      for key in "${bash2json_input_arr[@]}"; do
        json_append "$data" "$key" "" true
        data="$json_append_output"
      done
      data=${data#\],}
      data=${data/,,/,}
    ;;
    *) 
    return 1
    esac
  done
  arr_to_json_output="$data"
  ! "${sub:=false}" && echo "$arr_to_json_output" 
}

json_to_arr() {
    local sub="$4"
    local json="${1# }"
    local result=''
    [ -z "$2" ] && local output_arr=array_$RANDOM || local output_arr="$2"
    json_list "$json" true
    mapfile  -t json_to_arr_array < <(printf '%b' "${json_list_output}")
    if [[ "${json:0:1}" == '{' ]]; then 
      [ -z "$3" ] && result+="declare -Ag $output_arr=(" || local parentkey="${3//\"}."
      for line in "${json_to_arr_array[@]}"; do
        IFS=' ' read key value <<< "$line"
        [ -z "$key" ] && continue || key="${key//\"}"
        if [[ ${value:0:1} == "{" ]]; then 
          $FUNCNAME "$value" "" "${parentkey}${key}" true
          result+="$json_to_arr_output"
        else 
          [ -z "$3" ] && result+="[${key}]='$value' " || result+="[${parentkey}${key}]='$value' "
      fi
      done
    elif [[ "${json:0:1}" == '[' ]]; then
      [ -z "$3" ] && result+="declare -ag $output_arr=("
      for key in "${json_to_arr_array[@]}"; do
        key="${key#\"}"
        result+="'${key%\"}' "
      done <<< "$json_list_output"
    fi
    [ -z "$3" ] && result+=')'
    json_to_arr_output="${result/% \)/)}"
    ! "${sub:=false}" && echo "$json_to_arr_output"
}

function bash2json {
local ultraverbose=false
local orig_IFS="$IFS"
local vers='v3.2.0'
local silent=false
local validate=true
data=''
local input='' var='' query='' arg2='' arg3=''
declare -a allargs=()
for arg in "$@"; do
case "$arg" in
-V|--version)
echo "bash2json [${vers}]"
echo "Copyright (C) 2025 Tirito6626"
return 0
;;
-uv)           local ultraverbose=true    ;;
--from-json)   local action=from_json     ;;
--to-json)     local action=to_json       ;;
-q|--query)    local action=query         ;;
-T|--trim)     local action=trim          ;;
-A|--append)   local action=append        ;;
-H|-h|--help)  local action=help          ;;  
-v|--validate) local action=validate      ;;
-N|--no-validate) local validate=false    ;;
-s|--silent)   local silent=true          ;;
--auto-detect) local autodetect=true      ;;
--stdin)       local readfromstdin=true   ;;
-r|--raw)      local rawout=true          ;;
--input=*)   local input="${arg#*=}"      ;;
--output=*)  local output_arr="${arg#*=}" ;;
--mode=*)    local mode="${arg#*=}"       ;;
--auto-detect=*) local autodetect="${arg#*=}" ;;
*)              local allargs+=("$arg") ;;
esac
done
"$ultraverbose" && set -x
if [[ "$action" != "help" && "$action" != "to_json" && "${allargs[0]:0:1}" != '{' && "${allargs[0]:0:1}" != '[' ]]; then
if IFS= read -d '' -n 1  -t 0.001 || "${readfromstdin:=false}"; then 
  local var 
  read -rd '' var
  local query="${allargs[0]}"
  local arg2="${allargs[1]}"
  local arg3="${allargs[2]}"
else 
  if [ -f "$input" ] || [ -L "$input" ]; then 
    local var
    read -rd '' var < "$input"
    local query="${allargs[0]}"
    local arg2="${allargs[1]}"
    local arg3="${allargs[2]}"
  elif [[ "${input:0:1}" = '{' ||  "${input:0:1}" = '[' ]]; then 
    local var="$input"
    local query="${allargs[0]}"
    local arg2="${allargs[1]}"
    local arg3="${allargs[2]}"
  else
    local var="${allargs[0]}"
    local query="${allargs[1]}"
    local arg2="${allargs[2]}"
    local arg3="${allargs[3]}"
  fi
fi
else 
    local var="${allargs[0]}"
    local query="${allargs[1]}"
    local arg2="${allargs[2]}"
    local arg3="${allargs[3]}"
fi
if "${validate}" && [[ "${action:=query}" != "validate" && "${action:=query}" != "to_json"  && "${action:=query}" != "help" ]]; then 
 code=''
 json_validate "$var"
 [[ "$code" == 1 ]] && return 1
fi
[[ "$action" != "help" ]] && [ -z "$var" ] && error "input missing"
case "${action:=query}" in
help)
"${sourced:=false}" && echo "Usage: $FUNCNAME <input> <query|key?> <value?> [options?]" || echo "Usage: $0 <input> <query|key?> <value?> [options?]"
cat <<-EOF

Available options:
--from-json <input> <name?>         Convert JSON into associative/indexed array
--to-json   <array>                 Convert associative/indexed array into JSON
-q|--query  <input> <key>           Perform a JSON query (e.g. 'key' or 'key.subkey' or '[0].key') (default)
-A|--append <input> <key> <value>   Append key to JSON
-T|--trim   <input>                 Trim JSON (remove all spaces outside of double quotes)
-H|-h|--help                        Return this message
-V|--version                        Show current version
-v|--validate <input>               Validate JSON
-N|--no-validate                    Don't validate JSON input before actions
-s|--silent                         Don't return errors
--auto-detect                       Auto-detect key types while using --to-json
--stdin                             Read from standart input
-r|--raw                            Raw output
--input=<file/JSON>                 Set input or file to use as input 
--output=<name>                     Set output array name (doesn't execute it)
--auto-detect=<bool>                Enable/disable auto-detection


--from-json generates single array command with all keys and subkeys
Subkeys are returned as "declare -Ag <array name>=( ... [<key>.<subkey>]=<subkey value> )"
EOF
! "$sourced" && echo "NOTE: --to-json requires bash2json to be sourced, otherwise bash2json wouldn't be able access arrays"

;;
validate)  json_validate "$var" ;;
append)    json_append "$var" "$query" "$arg2" ;;
query)     json_query "$var" "$query" "${rawout:=false}" ;;
from_json) json_to_arr "$var" "${output_arr}" ;;
trim)      json_trim "$var" ;;
to_json)   arr_to_json "$var" ;;
esac
"$ultraverbose" && set +x
IFS="$old_IFS"
}

! "$sourced" && bash2json "$@"
